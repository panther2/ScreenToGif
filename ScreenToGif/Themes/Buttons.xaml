<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:n="clr-namespace:ScreenToGif.Controls"
                    xmlns:c="clr-namespace:ScreenToGif.Util.Converters"
                    xmlns:s="clr-namespace:System;assembly=mscorlib">

    <c:MultiLineTitle x:Key="MultiLineTitleConverter"/>

    <!--Image Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Vertical.Border">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinHeight="{TemplateBinding MinHeight}" 
                            Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Vertical" SnapsToDevicePixels="True"  HorizontalAlignment="Center" VerticalAlignment="Center">

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                     Margin="2,0,2,0" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                     Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                                  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Viewbox>

                            <TextBlock x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" 
                                       TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}" Padding="2"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FF2A8DD4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="#FFB1B1B1" />-->
                <Setter Property="Background" Value="#FFFDFDFD" />
                <!--<Setter Property="BorderBrush" Value="#FFE1E1E1" />-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Special Image Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Horizontal.Special">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinHeight="{TemplateBinding MinHeight}" 
                            Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal" SnapsToDevicePixels="True"  HorizontalAlignment="Center" VerticalAlignment="Center">

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                     Margin="2,0,2,0" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                     Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Viewbox>

                            <TextBlock x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" 
                                       TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}" Padding="2"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="#FFFFF8EB"/>
        <Setter Property="BorderBrush" Value="#FFFBDBA6"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFF9E7C3" />
                <Setter Property="BorderBrush" Value="#FFEEB860" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFEEB860" />
                <Setter Property="BorderBrush" Value="#FFFFB437" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="#FFB1B1B1" />-->
                <Setter Property="Background" Value="#FFFDFDFD" />
                <!--<Setter Property="BorderBrush" Value="#FFE1E1E1" />-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Horizontal Button Style-->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Horizontal">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <StackPanel Orientation="Horizontal" MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        
                        <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="2" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="2,0,2,0" Foreground="{TemplateBinding Foreground}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" 
                                       TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}"/>

                            <TextBlock Grid.Row="1" x:Name="KeyGestureTextBlock" Text="{TemplateBinding KeyGesture}"
                                       Foreground="#FF5D5D5D" FontSize="10" HorizontalAlignment="Right" Margin="0,-10,2,0" Padding="0" Height="13"/>
                        </Grid>
                    </StackPanel>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="KeyGesture" Value="{x:Static s:String.Empty}">
                            <Setter TargetName="KeyGestureTextBlock" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="TextBlockInternal" Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>

        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="DarkSlateGray" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Horizontal.Fade">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <StackPanel Orientation="Horizontal" MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">

                        <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="2" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="2,0,2,0" Foreground="{TemplateBinding Foreground}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" 
                                       TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}"/>

                            <TextBlock Grid.Row="1" x:Name="KeyGestureTextBlock" Text="{TemplateBinding KeyGesture}"
                                       Foreground="#FF5D5D5D" FontSize="10" HorizontalAlignment="Right" Margin="0,-10,2,0" Padding="0" Height="13"/>
                        </Grid>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>

                            <Setter TargetName="TextBlockInternal" Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="#FFD5E1F2"/>
                        </DataTrigger>
                        
                        <Trigger Property="KeyGesture" Value="{x:Static s:String.Empty}">
                            <Setter TargetName="KeyGestureTextBlock" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>

        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="DarkSlateGray" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Vertical Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Vertical">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}"
                                 Stretch="Uniform" StretchDirection="Both" Margin="5" Effect="{x:Null}"
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <TextBlock x:Name="TextBlockInternal" Grid.Row="1" Margin="2,0"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{TemplateBinding Text, Converter={StaticResource MultiLineTitleConverter}}" 
                                   TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}" TextAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Vertical Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.Vertical2">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{TemplateBinding ContentHeight}"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}"
                                 Stretch="Uniform" StretchDirection="Both" Margin="5" Effect="{x:Null}" Height="{TemplateBinding ContentHeight}" Width="{TemplateBinding ContentWidth}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <TextBlock x:Name="TextBlockInternal" Grid.Row="1" Margin="2,0"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Text, Converter={StaticResource MultiLineTitleConverter}}" 
                                   TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}" TextAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--NoText + Border Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.NoText">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="{TemplateBinding Padding}" Width="{TemplateBinding ContentWidth}" Height="{TemplateBinding ContentHeight}" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}"/>
                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="DarkSlateGray" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--NoText + Border Image Button Style -->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.NoText.Border">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                        <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                 Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FF2A8DD4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="#FFB1B1B1" />-->
                <Setter Property="Background" Value="#FFFDFDFD" />
                <!--<Setter Property="BorderBrush" Value="#FFE1E1E1" />-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--NoText + Fade-->
    <Style TargetType="{x:Type n:ImageButton}" BasedOn="{StaticResource {x:Type Button}}" x:Key="Style.Button.NoText.Fade">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" Width="Auto" SnapsToDevicePixels="True">
                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="{TemplateBinding Padding}" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Opacity" Value=".3"/>

        <Style.Triggers>
            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--Horizontal Button Style-->
    <Style TargetType="{x:Type n:ImageToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}" x:Key="Style.ToggleButton.Horizontal">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageToggleButton}">
                    <StackPanel Orientation="Horizontal" MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">

                        <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="2" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="2,0,2,0" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" 
                                       TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}"/>

                            <TextBlock Grid.Row="1" x:Name="KeyGestureTextBlock" Text="{TemplateBinding KeyGesture}"
                                       Foreground="#FF5D5D5D" FontSize="10" HorizontalAlignment="Right" Margin="0,-10,2,0" Padding="0" Height="13"/>
                        </Grid>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="KeyGesture" Value="{x:Static s:String.Empty}">
                            <Setter TargetName="KeyGestureTextBlock" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>

        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="DarkSlateGray" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
                    <Setter Property="Background" Value="#FFD5E1F2" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFC2D5F2" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--Vertical RepeatButton Style -->
    <Style TargetType="{x:Type n:ImageRepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" x:Key="Style.RepeatButton.Vertical">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageRepeatButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{TemplateBinding ContentHeight}"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}"
                                 Stretch="Uniform" StretchDirection="Both" Margin="5" Effect="{x:Null}" Height="{TemplateBinding ContentHeight}" Width="{TemplateBinding ContentWidth}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <TextBlock x:Name="TextBlockInternal" Grid.Row="1" Margin="2,0"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Text, Converter={StaticResource MultiLineTitleConverter}}" 
                                   TextWrapping="{TemplateBinding TextWrapping}" Effect="{TemplateBinding Effect}" TextAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinWidth" Value="50"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Horizontal RepeatButton Style -->
    <Style TargetType="{x:Type n:ImageRepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" x:Key="Style.RepeatButton.Horizontal">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageRepeatButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" Width="Auto" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="{TemplateBinding Padding}" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>

                        <TextBlock x:Name="TextBlockInternal" Grid.Column="1" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3,5,3,0"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" TextWrapping="WrapWithOverflow" 
                                   Effect="{TemplateBinding Effect}" TextAlignment="Center"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--NoText RepeatButton Style -->
    <Style TargetType="{x:Type n:ImageRepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" x:Key="Style.RepeatButton.NoText">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageRepeatButton}">
                    <Grid MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" Width="Auto" SnapsToDevicePixels="True">
                        <Viewbox x:Name="ViewBoxInternal" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="{TemplateBinding Padding}" Stretch="Uniform" StretchDirection="Both" Effect="{x:Null}"
                                 Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                 MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" 
                                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--NoText ImageRadioButton Style-->
    <Style BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type n:ImageRadioButton}" x:Key="Style.ImageRadioButton.NoText">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ImageRadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <Grid MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                     Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
                    <Setter Property="Background" Value="#FFD5E1F2" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFC2D5F2" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--Dropdown Button Style-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButton.Horizontal">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="templateRoot" MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="templateRoot" Value="#FFD5E1F2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="templateRoot" Value="#FFA3BDE3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type n:DropDownButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:DropDownButton}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>

                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Grid x:Name="shadow" Background="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <Rectangle StrokeThickness="2" Margin="15,0,0,0" HorizontalAlignment="Left">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#00BEBEBE" Offset="0"/>
                                            <GradientStop Color="#00BEBEBE" Offset="1"/>
                                            <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                            <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle StrokeThickness="2" Margin="0,0,15,0" HorizontalAlignment="Right" >
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#00BEBEBE" Offset="0"/>
                                            <GradientStop Color="#00BEBEBE" Offset="1"/>
                                            <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                            <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>

                                <Border x:Name="DropDownBorder" BorderBrush="#FFABADB3" BorderThickness="1" Background="White" Effect="{DynamicResource Shadow.Border}" Margin="0,0,0,5">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>

                        <ToggleButton Grid.Column="0" Grid.ColumnSpan="3" x:Name="ToggleButton" Background="{TemplateBinding Background}" 
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                      IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ToggleButton.Horizontal}" />

                        <Viewbox Grid.Column="0" x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                 Margin="{TemplateBinding Padding}" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" IsHitTestVisible="False" 
                                 Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                            <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" HorizontalAlignment="Center" />
                        </Viewbox>

                        <TextBlock Grid.Column="1" x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                   VerticalAlignment="Center" Text="{TemplateBinding Description}" TextWrapping="WrapWithOverflow" 
                                   Effect="{TemplateBinding Effect}" IsHitTestVisible="False"/>

                        <Path Grid.Column="2" x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" 
                              Fill="#FF606060" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"
                              Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsVertical" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type n:DropDownButton}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Grid x:Name="shadow" Background="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                        <Rectangle StrokeThickness="2" Margin="15,0,0,0" HorizontalAlignment="Left">
                                            <Rectangle.Stroke>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Stroke>
                                        </Rectangle>
                                        <Rectangle StrokeThickness="2" Margin="0,0,15,0" HorizontalAlignment="Right" >
                                            <Rectangle.Stroke>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Stroke>
                                        </Rectangle>

                                        <Border x:Name="DropDownBorder" BorderBrush="#FFABADB3" BorderThickness="1" Background="White" Effect="{DynamicResource Shadow.Border}" Margin="0,0,0,5">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Grid>
                                </Popup>

                                <ToggleButton Grid.Row="0" Grid.RowSpan="3" x:Name="ToggleButton" Background="{TemplateBinding Background}" 
                                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ToggleButton.Horizontal}" />

                                <Viewbox Grid.Row="0" x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{TemplateBinding IsEnabled}"
                                         Margin="{TemplateBinding Padding}" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" IsHitTestVisible="False" 
                                         Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                    <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto" HorizontalAlignment="Center" />
                                </Viewbox>

                                <TextBlock Grid.Row="1" x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                           VerticalAlignment="Center" Text="{TemplateBinding Description}" TextWrapping="WrapWithOverflow" 
                                           Effect="{TemplateBinding Effect}" IsHitTestVisible="False"/>

                                <Viewbox Grid.Row="2" MaxHeight="7" MaxWidth="7" Margin="1" Stretch="Uniform" StretchDirection="Both" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Path  x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="#FF606060"/>
                                </Viewbox>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                                </Trigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>